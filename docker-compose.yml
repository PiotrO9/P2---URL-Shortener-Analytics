version: '3.8'

services:
 postgres:
  image: postgres:15-alpine
  container_name: url_shortener_db
  env_file:
   - .env
  environment:
   POSTGRES_USER: ${POSTGRES_USER:-postgres}
   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
   POSTGRES_DB: ${POSTGRES_DB:-url_shortener}
  ports:
   - '5432:5432'
  volumes:
   - postgres_data:/var/lib/postgresql/data
  networks:
   - url_shortener_network
  healthcheck:
   test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
   interval: 10s
   timeout: 5s
   retries: 5

 redis:
  image: redis:7-alpine
  container_name: url_shortener_redis
  ports:
   - '6379:6379'
  networks:
   - url_shortener_network
  healthcheck:
   test: ['CMD', 'redis-cli', 'ping']
   interval: 5s
   timeout: 3s
   retries: 10

 app:
  build: .
  container_name: url_shortener_app
  ports:
   - '3000:3000'
  environment:
   NODE_ENV: ${NODE_ENV:-development}
   PORT: ${PORT:-3000}
   DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-url_shortener}?schema=public
   REDIS_URL: ${REDIS_URL:-redis://redis:6379}
   PUBLIC_BASE_URL: ${PUBLIC_BASE_URL:-http://localhost:3000}
  depends_on:
   postgres:
    condition: service_healthy
   redis:
    condition: service_healthy
  networks:
   - url_shortener_network
  volumes:
   - .:/app
   - /app/node_modules
  command: sh -c "npm run db:push && npm run dev"
  healthcheck:
   test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000/health']
   interval: 30s
   timeout: 10s
   retries: 3
   start_period: 40s

volumes:
 postgres_data:

networks:
 url_shortener_network:
  driver: bridge
